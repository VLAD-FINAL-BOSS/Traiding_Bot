from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from scripts.level_price_alert import SilentMoexPriceAlert
import asyncio

router = Router()
alert_system = SilentMoexPriceAlert()
subscribed_users = set()
class AlertState(StatesGroup):
    waiting_for_alert_data = State()



@router.message(F.text.startswith("/add_alert"))
async def start_alert_handler(message: Message, state: FSMContext):

    await message.answer(
        "üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–π (—Ñ–æ—Ä–º–∞—Ç: —Ç–∏–∫–µ—Ä —Ü–µ–Ω–∞ long/short)\n"
        "–ü—Ä–∏–º–µ—Ä: `GAZP 160 short` ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ 160\n"
        "–ü—Ä–∏–º–µ—Ä: `SBER 300 long` ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤—ã—à–µ 300",
        parse_mode="Markdown"
    )
    await state.set_state(AlertState.waiting_for_alert_data)


@router.message(AlertState.waiting_for_alert_data)
async def add_alert_handler(message: Message, state: FSMContext):
    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: `–¢–ò–ö–ï–† –¶–ï–ù–ê long/short`", parse_mode="Markdown")
            return

        ticker, price, direction = parts
        if direction.lower() not in ("long", "short"):
            await message.answer("‚ö†Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `long` –∏–ª–∏ `short`", parse_mode="Markdown")
            return

        alert_system.add_alert(chat_id=message.chat.id, ticker=ticker.upper(), price=price, direction=direction.lower())
        subscribed_users.add(message.chat.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(f"‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {ticker.upper()} {direction.lower()} {price} ‚ÇΩ")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞")
    finally:
        await state.clear()

# ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
async def alert_monitoring_task(bot):
    while True:
        try:
            alert_messages = alert_system.check_alerts_once()
            for chat_id, messages in alert_messages.items():
                for msg in messages:
                    await bot.send_message(chat_id, msg)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ alert_monitoring_task:", e)
        await asyncio.sleep(10)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫

@router.message(F.text == "/my_alerts")
async def show_alerts_handler(message: Message):
    summary = alert_system.get_alerts_summary(chat_id=message.chat.id)
    await message.answer(summary)
